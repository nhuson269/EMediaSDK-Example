// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EMediaSDK
import AVFoundation
@_exported import EMediaSDK
import Foundation
import ReplayKit
import Starscream
import Swift
import WebRTC
import _Concurrency
public enum EMediaClientMode : Swift.Int {
  case join
  case play
  case publish
  case conference
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class EMediaClient : ObjectiveC.NSObject, EMediaSDK.EMediaClientProtocol {
  public var delegate: EMediaSDK.EMediaClientDelegate!
  @objc override dynamic public init()
  public func setOptions(url: Swift.String, streamId: Swift.String, token: Swift.String = "", mode: EMediaSDK.EMediaClientMode = .join, enableDataChannel: Swift.Bool = false, captureScreenEnabled: Swift.Bool = false)
  public func setMaxVideoBps(videoBitratePerSecond: Foundation.NSNumber)
  public func setMultiPeerMode(enable: Swift.Bool, mode: Swift.String)
  public func setVideoEnable(enable: Swift.Bool)
  public func getStreamId() -> Swift.String
  public func getLeaveMessage() -> [Swift.String : Swift.String]
  public func speakerOn()
  public func speakerOff()
  open func start()
  open func connectWebSocket()
  open func setCameraPosition(position: AVFoundation.AVCaptureDevice.Position)
  open func setTargetResolution(width: Swift.Int, height: Swift.Int)
  open func stop()
  open func initPeerConnection()
  open func switchCamera()
  open func sendData(data: Foundation.Data, binary: Swift.Bool = false)
  open func isDataChannelActive() -> Swift.Bool
  open func setLocalView(container: UIKit.UIView, mode: UIKit.UIView.ContentMode = .scaleAspectFit)
  open func setRemoteView(remoteContainer: UIKit.UIView, mode: UIKit.UIView.ContentMode = .scaleAspectFit)
  open func isConnected() -> Swift.Bool
  open func setDebug(_ value: Swift.Bool)
  public static func setDebug(_ value: Swift.Bool)
  open func toggleAudio()
  open func toggleVideo()
  open func getCurrentMode() -> EMediaSDK.EMediaClientMode
  open func getWsUrl() -> Swift.String
  public static func printf(_ msg: Swift.String)
  public func getStreamInfo()
  public func forStreamQuality(resolutionHeight: Swift.Int)
  public func getStats(completionHandler: @escaping (WebRTC.RTCStatisticsReport) -> Swift.Void)
  public func deliverExternalAudio(sampleBuffer: CoreMedia.CMSampleBuffer)
  public func setExternalAudio(externalAudioEnabled: Swift.Bool)
  public func setExternalVideoCapture(externalVideoCapture: Swift.Bool)
  public func deliverExternalVideo(sampleBuffer: CoreMedia.CMSampleBuffer)
  @objc deinit
}
extension EMediaSDK.EMediaClient {
  public func sendMessage(_ message: [Swift.String : Any])
  public func addLocalStream()
  public func addRemoteStream()
  public func connectionStateChanged(newState: WebRTC.RTCIceConnectionState)
  public func dataReceivedFromDataChannel(didReceiveData data: WebRTC.RTCDataBuffer)
}
extension EMediaSDK.EMediaClient : Starscream.WebSocketDelegate {
  public func getPingMessage() -> [Swift.String : Swift.String]
  public func didReceive(event: Starscream.WebSocketEvent, client: Starscream.WebSocket)
}
extension EMediaSDK.EMediaClient : WebRTC.RTCAudioSessionDelegate {
  @objc dynamic public func audioSessionDidStartPlayOrRecord(_ session: WebRTC.RTCAudioSession)
}
extension EMediaSDK.EMediaClient : WebRTC.RTCVideoViewDelegate {
  @objc dynamic public func videoView(_ videoView: WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreGraphics.CGSize)
}
@_hasMissingDesignatedInitializers public class StreamInformation {
  final public let streamWidth: Swift.Int
  final public let streamHeight: Swift.Int
  final public let videoBitrate: Swift.Int
  final public let audioBitrate: Swift.Int
  final public let videoCodec: Swift.String
  @objc deinit
}
public protocol EMediaClientDelegate {
  func clientDidConnect(_ client: EMediaSDK.EMediaClient)
  func clientDidDisconnect(_ message: Swift.String)
  func clientHasError(_ message: Swift.String)
  func remoteStreamStarted(streamId: Swift.String)
  func remoteStreamRemoved(streamId: Swift.String)
  func localStreamStarted(streamId: Swift.String)
  func playStarted(streamId: Swift.String)
  func playFinished(streamId: Swift.String)
  func publishStarted(streamId: Swift.String)
  func publishFinished(streamId: Swift.String)
  func disconnected(streamId: Swift.String)
  func audioSessionDidStartPlayOrRecord(streamId: Swift.String)
  func dataReceivedFromDataChannel(streamId: Swift.String, data: Foundation.Data, binary: Swift.Bool)
  func streamInformation(streamInfo: [EMediaSDK.StreamInformation])
}
public protocol ConferenceClientProtocol {
  func joinRoom(roomId: Swift.String, streamId: Swift.String)
  func leaveRoom()
}
public protocol ConferenceClientDelegate {
  func streamIdToPublish(streamId: Swift.String)
  func newStreamsJoined(streams: [Swift.String])
  func streamsLeaved(streams: [Swift.String])
}
open class ConferenceClient : EMediaSDK.ConferenceClientProtocol, Starscream.WebSocketDelegate {
  public init(serverURL: Swift.String, conferenceClientDelegate: EMediaSDK.ConferenceClientDelegate)
  @objc deinit
  public func didConnected(socket: Starscream.WebSocketClient)
  public func receiveMessage(socket: Starscream.WebSocketClient, text: Swift.String)
  public func joinRoom(roomId: Swift.String, streamId: Swift.String)
  public func leaveRoom()
  public func didReceive(event: Starscream.WebSocketEvent, client: Starscream.WebSocket)
}
public protocol EMediaClientProtocol {
  func setOptions(url: Swift.String, streamId: Swift.String, token: Swift.String, mode: EMediaSDK.EMediaClientMode, enableDataChannel: Swift.Bool, captureScreenEnabled: Swift.Bool)
  func setVideoEnable(enable: Swift.Bool)
  func speakerOn()
  func speakerOff()
  func initPeerConnection()
  func start()
  func setCameraPosition(position: AVFoundation.AVCaptureDevice.Position)
  func setTargetResolution(width: Swift.Int, height: Swift.Int)
  func stop()
  func switchCamera()
  func sendData(data: Foundation.Data, binary: Swift.Bool)
  func isDataChannelActive() -> Swift.Bool
  func setLocalView(container: UIKit.UIView, mode: UIKit.UIView.ContentMode)
  func setRemoteView(remoteContainer: UIKit.UIView, mode: UIKit.UIView.ContentMode)
  func isConnected() -> Swift.Bool
  @available(*, deprecated, message: "Use static version of setDebug")
  func setDebug(_ value: Swift.Bool)
  static func setDebug(_ value: Swift.Bool)
  func toggleAudio()
  func toggleVideo()
  func getStreamId() -> Swift.String
  func getStreamInfo()
  func forStreamQuality(resolutionHeight: Swift.Int)
  func getStats(completionHandler: @escaping (WebRTC.RTCStatisticsReport) -> Swift.Void)
  func setMaxVideoBps(videoBitratePerSecond: Foundation.NSNumber)
  func deliverExternalAudio(sampleBuffer: CoreMedia.CMSampleBuffer)
  func setExternalAudio(externalAudioEnabled: Swift.Bool)
  func setExternalVideoCapture(externalVideoCapture: Swift.Bool)
  func deliverExternalVideo(sampleBuffer: CoreMedia.CMSampleBuffer)
}
extension Swift.Dictionary {
  public var json: Swift.String {
    get
  }
}
extension Swift.String {
  public func toURL() -> Foundation.URL
  public func toJSON() -> [Swift.String : Any]?
}
@objc @_inheritsConvenienceInitializers public class Config : ObjectiveC.NSObject {
  public static func setDefaultStunServer(server: WebRTC.RTCIceServer)
  @objc override dynamic public init()
  @objc deinit
}
extension EMediaSDK.EMediaClientMode : Swift.Equatable {}
extension EMediaSDK.EMediaClientMode : Swift.Hashable {}
extension EMediaSDK.EMediaClientMode : Swift.RawRepresentable {}
